const assert = require("assert");

const { path } = require("./donut");
const { fetchInput } = require("../utils");

suite("Day 20: Donut Maze", () => {
  suite("Part 1", () => {
    test("Test cases are valid", () => {
      [
        [
          "         A           \n" +
            "         A           \n" +
            "  #######.#########  \n" +
            "  #######.........#  \n" +
            "  #######.#######.#  \n" +
            "  #######.#######.#  \n" +
            "  #######.#######.#  \n" +
            "  #####  B    ###.#  \n" +
            "BC...##  C    ###.#  \n" +
            "  ##.##       ###.#  \n" +
            "  ##...DE  F  ###.#  \n" +
            "  #####    G  ###.#  \n" +
            "  #########.#####.#  \n" +
            "DE..#######...###.#  \n" +
            "  #.#########.###.#  \n" +
            "FG..#########.....#  \n" +
            "  ###########.#####  \n" +
            "             Z       \n" +
            "             Z       ",
          23,
        ],
        [
          "                   A               \n" +
            "                   A               \n" +
            "  #################.#############  \n" +
            "  #.#...#...................#.#.#  \n" +
            "  #.#.#.###.###.###.#########.#.#  \n" +
            "  #.#.#.......#...#.....#.#.#...#  \n" +
            "  #.#########.###.#####.#.#.###.#  \n" +
            "  #.............#.#.....#.......#  \n" +
            "  ###.###########.###.#####.#.#.#  \n" +
            "  #.....#        A   C    #.#.#.#  \n" +
            "  #######        S   P    #####.#  \n" +
            "  #.#...#                 #......VT\n" +
            "  #.#.#.#                 #.#####  \n" +
            "  #...#.#               YN....#.#  \n" +
            "  #.###.#                 #####.#  \n" +
            "DI....#.#                 #.....#  \n" +
            "  #####.#                 #.###.#  \n" +
            "ZZ......#               QG....#..AS\n" +
            "  ###.###                 #######  \n" +
            "JO..#.#.#                 #.....#  \n" +
            "  #.#.#.#                 ###.#.#  \n" +
            "  #...#..DI             BU....#..LF\n" +
            "  #####.#                 #.#####  \n" +
            "YN......#               VT..#....QG\n" +
            "  #.###.#                 #.###.#  \n" +
            "  #.#...#                 #.....#  \n" +
            "  ###.###    J L     J    #.#.###  \n" +
            "  #.....#    O F     P    #.#...#  \n" +
            "  #.###.#####.#.#####.#####.###.#  \n" +
            "  #...#.#.#...#.....#.....#.#...#  \n" +
            "  #.#####.###.###.#.#.#########.#  \n" +
            "  #...#.#.....#...#.#.#.#.....#.#  \n" +
            "  #.###.#####.###.###.#.#.#######  \n" +
            "  #.#.........#...#.............#  \n" +
            "  #########.###.###.#############  \n" +
            "           B   J   C               \n" +
            "           U   P   P               \n",
          58,
        ],
      ].forEach(([input, expected]) => {
        assert.equal(path(input), expected);
      });
    });

    const answer = 570;
    test(`Answer is ${answer}`, () => {
      const input = fetchInput({ trim: false });
      assert.equal(path(input), answer);
    });
  });
});
